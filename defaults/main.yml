---
# Copyright 2017, Rackspace US, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

filebeat_apt_gpg_keys:
  # NOTE(sigmavirus24): Yes, it really is this key:
  # https://www.elastic.co/guide/en/beats/libbeat/current/setup-repositories.html
  - { url: "https://artifacts.elastic.co/GPG-KEY-elasticsearch", state: present }

filebeat_apt_repo_url: "https://artifacts.elastic.co/packages/5.x/apt"

filebeat_apt_repos:
  - { repo: "deb {{ filebeat_apt_repo_url }} stable main", state: present }

filebeat_apt_packages:
  - "filebeat"

filebeat_logstash_port: "{{ logstash_beats_port |default(5044) }}"

# NOTE(sigmavirus24): Once we upgrade to Ansible 2.1, we can use the extract
# filter
#"{{ groups['logstash_all'] | map('extract', hostvars, ['container_address']) | list }}"
filebeat_logstash_hosts: "{{ groups['logstash_all'] | map('extract', hostvars, ['container_address']) | list }}"

# NOTE(sigmavirus24): Explanation of the regular expression:
# - The Date is formatted by oslo.log as YYYY-MM-DD
# - The Time is formatted by oslo.log as HH:MM:SS.Microseconds
# - The Python Module tends to look like "cinder.api.scheduler"
# - The Id is the group of request Ids, e.g., [req-<UUID4> ...]
# We don't want lines like these to be captures as "multiline"
# (hence the negate: true line) so we match the lines that we want
# to be single log line items and negate them. We want to exclude
# "Traceback" here because:
# 1. It's not useful - it has the same timestamp as the actual
#    traceback.
# 2. If there is a multiline log before it, you would get one large
#    log item instead of two discrete items.
# See also https://play.golang.org/p/Y6qBej0IB2
#
#                              Date        Time       PID     Level   Python Module   Id
multiline_openstack_pattern: '^[0-9-]{10} +[0-9:\.]+ +[0-9]+ +[A-Z]+ +[A-Za-z0-9\._]+ \[|Traceback'
# NOTE(sigmavirus24): The logs in the keystone-apache-error logs are just
# *slightly* different from the regular openstack logs. They have much greater
# sub-second precision and a second time attribute.
# See also https://play.golang.org/p/CKZXMOiwoi
#
#                                  Date        Time      Date         Time     PID     Level   Python Module   Request Id
multiline_keystone_error_pattern: '[0-9-]{10} +[0-9:\.]+ [0-9-]{10} +[0-9:\.]+ [0-9]+ +[A-Z]+ +[A-Za-z0-9\._]+ \[|Traceback'
# NOTE(d34dh0r53): There are multiple patterns of multiline entries
# that appear in the various swift logs. These patterns only match the most
# common as multiple multiline patterns are currently not possible.
# See Also https://play.golang.org/p/1XcqjYl6kl
#
#                                              Month                  Day         Time       Host           Python Module         Status
multiline_swift_container_replicator_pattern: '^[A-Za-z]+[[:space:]]* +[0-9]{1,2} +[0-9:\.]+ +[A-Za-z0-9-]+ container-replicator: +[A-Za-z0-9-\ ]+'
#
# See Also https://play.golang.org/p/pXS87svYhY
#
#                                            Month                  Day         Time       Host           Python Module       Status
multiline_swift_account_replicator_pattern: '^[A-Za-z]+[[:space:]]* +[0-9]{1,2} +[0-9:\.]+ +[A-Za-z0-9-]+ account-replicator: +[A-Za-z0-9-\ ]+'
#
# See Also https://play.golang.org/p/ImBB_vgtok
#
#                                          Month                   Day         Time       Host           Python Module      Status
multiline_swift_object_replicator_pattern: '^[A-Za-z]+[[:space:]]* +[0-9]{1,2} +[0-9:\.]+ +[A-Za-z0-9-]+ object-replicator: +[A-Za-z0-9-\ ]+'

filebeat_log_store_path: '/var/log/log-storage'

filebeat_registry_file: '/var/lib/filebeat/registry'

file_beat_config:
  registry_file: "{{ filebeat_registry_file }}"
  filebeat:
    prospectors: []
  output:
    logstash:
      hosts: "{{ filebeat_logstash_hosts.split(',') }}"
  shipper: null
  logging:
    files:
      rotateeverybytes: 10485760  # = 10MB
      keepfiles: 7


filebeat_logging_paths:
  - groups:
      - cinder_all
    paths: []
    document_type: openstack
    tags:
      - openstack
      - oslofmt
      - cinder
    multiline:
      pattern: "{{ multiline_openstack_pattern }}"
      negate: 'true'
      match: after
  - groups:
      - glance_all
    paths: []
    document_type: openstack
    tags:
      - openstack
      - oslofmt
      - glance
    multiline:
      pattern: "{{ multiline_openstack_pattern }}"
      negate: 'true'
      match: after
  - groups:
      - heat_all
    paths: []
    document_type: openstack
    tags:
      - openstack
      - oslofmt
      - heat
    multiline:
      pattern: "{{ multiline_openstack_pattern }}"
      negate: 'true'
      match: after
  - groups:
      - horizon_all
    paths: []
    document_type: openstack
    tags:
      - openstack
      - oslofmt
      - horizon
    multiline:
      pattern: "{{ multiline_openstack_pattern }}"
      negate: 'true'
      match: after
  - groups:
      - keystone_all
    paths:
      - keystone.log
    document_type: openstack
    tags:
      - openstack
      - oslofmt
      - keystone
    multiline:
      pattern: "{{ multiline_openstack_pattern }}"
      negate: 'true'
      match: after
  - groups:
      - keystone_all
    paths:
      - ssl_access.log
    tags:
      - openstack
      - apache
      - apache-access
      - keystone
  - groups:
      - keystone_all
    paths:
      - keystone-apache-error.log
    tags:
      - openstack
      - apache
      - apache-error
      - keystone
    multiline:
      pattern: "{{ multiline_keystone_error_pattern }}"
      negate: 'true'
      match: after
  - groups:
      - neutron_all
    paths: []
    document_type: openstack
    tags:
      - openstack
      - oslofmt
      - neutron
    multiline:
      pattern: "{{ multiline_openstack_pattern }}"
      negate: 'true'
      match: after
  - groups:
      - nova_all
    paths: []
    document_type: openstack
    tags:
      - openstack
      - oslofmt
      - nova
    multiline:
      pattern: "{{ multiline_openstack_pattern }}"
      negate: 'true'
      match: after
  - groups:
      - magnum_all
    paths: []
    document_type: openstack
    tags:
      - openstack
      - oslofmt
      - magnum
    multiline:
      pattern: "{{ multiline_openstack_pattern }}"
      negate: 'true'
      match: after
  - groups:
      - octavia_all
    paths:
      - '/var/log/octavia/*.log'
    document_type: openstack
    tags:
      - openstack
      - oslofmt
      - octavia
    multiline:
      pattern: "{{ multiline_openstack_pattern }}"
      negate: 'true'
      match: after
  # NOTE(sigmavirus24): Swift does not use oslo.log, so we cannot rely on our
  # oslo-based pattern
  - groups:
      - swift_all
    paths:
      - 'account*.log'
    document_type: openstack
    tags:
      - openstack
      - swift
      - swift-account
    multiline:
      pattern: "{{ multiline_swift_account_replicator_pattern }}"
      negate: false
      match: after
  - groups:
      - swift_all
    paths:
      - 'container*.log'
    document_type: openstack
    tags:
      - openstack
      - swift
      - swift-container
    multiline:
      pattern: "{{ multiline_swift_container_replicator_pattern }}"
      negate: false
      match: after
  - groups:
      - swift_all
    paths:
      - 'object*.log'
    document_type: openstack
    tags:
      - openstack
      - swift
      - swift-object
    multiline:
      pattern: "{{ multiline_swift_object_replicator_pattern }}"
      negate: false
      match: after
  - groups:
      - swift_all
    paths:
      - 'proxy*.log'
    document_type: openstack
    tags:
      - openstack
      - swift
      - swift-proxy
  # Start of non-OpenStack services whose logs we'd like to ship
  - groups:
      - haproxy_all
    paths: []
    tags:
      - haproxy
      - infrastructure
  - groups:
      - lxc_hosts
    paths: []
    tags:
      - lxc
      - infrastructure
  - groups:
      - galera_all
    paths:
      - '/var/log/mysql_logs/*.log'
    tags:
      - galera
      - mysql
      - infrastructure
    multiline:
      # See https://play.golang.org/p/1r4iM0xwjQ
      pattern: '^([^0-9W]|$)'
      negate: 'false'
      match: after
  - groups:
      - rabbitmq_all
    paths: []
    multiline:
      # See https://play.golang.org/p/2SwhbSZxue
      pattern: '^='
      negate: 'true'
      match: after
    tags:
      - rabbitmq
      - infrastructure
  - groups:
      - elasticsearch_all
    paths: []
    multiline:
      # See https://play.golang.org/p/Fo3bb7Mcgr
      pattern: '^[^\[]'
      negate: 'false'
      match: after
    tags:
      - elasticsearch
      - infrastructure
      - logging
  - groups:
      - logstash_all
    paths: []
    tags:
      - logstash
      - infrastructure
      - logging
  - groups:
      - ceph_all
    paths:
      - 'ceph-mon.*.log'
    multiline:
      pattern: '^[a-z_]* '
      negate: 'false'
      match: after
    tags:
      - ceph-mon
      - ceph
      - infrastructure
  - groups:
      - ceph_all
    paths:
      - 'ceph-osd.*.log'
    tags:
      - ceph-osd
      - ceph
      - infrastructure
  - groups:
      - repo_all
    paths:
      - '*access.log'
    tags:
      - repo
      - nginx
      - nginx-access
      - infrastructure
  - groups:
      - repo_all
    paths:
      - '*error.log'
    tags:
      - repo
      - nginx
      - nginx-error
      - infrastructure


filebeat_configuration_files:
  - { src: "filebeat.yml.j2", dest: "/etc/filebeat/filebeat.yml" }
